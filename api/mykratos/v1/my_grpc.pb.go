// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: api/mykratos/v1/my.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	My_CreateMy_FullMethodName = "/api.mykratos.v1.My/CreateMy"
	My_UpdateMy_FullMethodName = "/api.mykratos.v1.My/UpdateMy"
	My_DeleteMy_FullMethodName = "/api.mykratos.v1.My/DeleteMy"
	My_GetMy_FullMethodName    = "/api.mykratos.v1.My/GetMy"
	My_ListMy_FullMethodName   = "/api.mykratos.v1.My/ListMy"
)

// MyClient is the client API for My service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyClient interface {
	CreateMy(ctx context.Context, in *CreateMyRequest, opts ...grpc.CallOption) (*CreateMyReply, error)
	UpdateMy(ctx context.Context, in *UpdateMyRequest, opts ...grpc.CallOption) (*UpdateMyReply, error)
	DeleteMy(ctx context.Context, in *DeleteMyRequest, opts ...grpc.CallOption) (*DeleteMyReply, error)
	GetMy(ctx context.Context, in *GetMyRequest, opts ...grpc.CallOption) (*GetMyReply, error)
	ListMy(ctx context.Context, in *ListMyRequest, opts ...grpc.CallOption) (*ListMyReply, error)
}

type myClient struct {
	cc grpc.ClientConnInterface
}

func NewMyClient(cc grpc.ClientConnInterface) MyClient {
	return &myClient{cc}
}

func (c *myClient) CreateMy(ctx context.Context, in *CreateMyRequest, opts ...grpc.CallOption) (*CreateMyReply, error) {
	out := new(CreateMyReply)
	err := c.cc.Invoke(ctx, My_CreateMy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myClient) UpdateMy(ctx context.Context, in *UpdateMyRequest, opts ...grpc.CallOption) (*UpdateMyReply, error) {
	out := new(UpdateMyReply)
	err := c.cc.Invoke(ctx, My_UpdateMy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myClient) DeleteMy(ctx context.Context, in *DeleteMyRequest, opts ...grpc.CallOption) (*DeleteMyReply, error) {
	out := new(DeleteMyReply)
	err := c.cc.Invoke(ctx, My_DeleteMy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myClient) GetMy(ctx context.Context, in *GetMyRequest, opts ...grpc.CallOption) (*GetMyReply, error) {
	out := new(GetMyReply)
	err := c.cc.Invoke(ctx, My_GetMy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myClient) ListMy(ctx context.Context, in *ListMyRequest, opts ...grpc.CallOption) (*ListMyReply, error) {
	out := new(ListMyReply)
	err := c.cc.Invoke(ctx, My_ListMy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyServer is the server API for My service.
// All implementations must embed UnimplementedMyServer
// for forward compatibility
type MyServer interface {
	CreateMy(context.Context, *CreateMyRequest) (*CreateMyReply, error)
	UpdateMy(context.Context, *UpdateMyRequest) (*UpdateMyReply, error)
	DeleteMy(context.Context, *DeleteMyRequest) (*DeleteMyReply, error)
	GetMy(context.Context, *GetMyRequest) (*GetMyReply, error)
	ListMy(context.Context, *ListMyRequest) (*ListMyReply, error)
	mustEmbedUnimplementedMyServer()
}

// UnimplementedMyServer must be embedded to have forward compatible implementations.
type UnimplementedMyServer struct {
}

func (UnimplementedMyServer) CreateMy(context.Context, *CreateMyRequest) (*CreateMyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMy not implemented")
}
func (UnimplementedMyServer) UpdateMy(context.Context, *UpdateMyRequest) (*UpdateMyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMy not implemented")
}
func (UnimplementedMyServer) DeleteMy(context.Context, *DeleteMyRequest) (*DeleteMyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMy not implemented")
}
func (UnimplementedMyServer) GetMy(context.Context, *GetMyRequest) (*GetMyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMy not implemented")
}
func (UnimplementedMyServer) ListMy(context.Context, *ListMyRequest) (*ListMyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMy not implemented")
}
func (UnimplementedMyServer) mustEmbedUnimplementedMyServer() {}

// UnsafeMyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyServer will
// result in compilation errors.
type UnsafeMyServer interface {
	mustEmbedUnimplementedMyServer()
}

func RegisterMyServer(s grpc.ServiceRegistrar, srv MyServer) {
	s.RegisterService(&My_ServiceDesc, srv)
}

func _My_CreateMy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServer).CreateMy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: My_CreateMy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServer).CreateMy(ctx, req.(*CreateMyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _My_UpdateMy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServer).UpdateMy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: My_UpdateMy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServer).UpdateMy(ctx, req.(*UpdateMyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _My_DeleteMy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServer).DeleteMy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: My_DeleteMy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServer).DeleteMy(ctx, req.(*DeleteMyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _My_GetMy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServer).GetMy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: My_GetMy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServer).GetMy(ctx, req.(*GetMyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _My_ListMy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServer).ListMy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: My_ListMy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServer).ListMy(ctx, req.(*ListMyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// My_ServiceDesc is the grpc.ServiceDesc for My service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var My_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.mykratos.v1.My",
	HandlerType: (*MyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMy",
			Handler:    _My_CreateMy_Handler,
		},
		{
			MethodName: "UpdateMy",
			Handler:    _My_UpdateMy_Handler,
		},
		{
			MethodName: "DeleteMy",
			Handler:    _My_DeleteMy_Handler,
		},
		{
			MethodName: "GetMy",
			Handler:    _My_GetMy_Handler,
		},
		{
			MethodName: "ListMy",
			Handler:    _My_ListMy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/mykratos/v1/my.proto",
}

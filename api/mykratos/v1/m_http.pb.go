// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.6.1
// source: api/mykratos/v1/m.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMCreateM = "/api.mykratos.v1.M/CreateM"
const OperationMDeleteM = "/api.mykratos.v1.M/DeleteM"
const OperationMGetM = "/api.mykratos.v1.M/GetM"
const OperationMListM = "/api.mykratos.v1.M/ListM"
const OperationMUpdateM = "/api.mykratos.v1.M/UpdateM"

type MHTTPServer interface {
	CreateM(context.Context, *CreateMRequest) (*CreateMReply, error)
	DeleteM(context.Context, *DeleteMRequest) (*DeleteMReply, error)
	GetM(context.Context, *GetMRequest) (*GetMReply, error)
	ListM(context.Context, *ListMRequest) (*ListMReply, error)
	UpdateM(context.Context, *UpdateMRequest) (*UpdateMReply, error)
}

func RegisterMHTTPServer(s *http.Server, srv MHTTPServer) {
	r := s.Route("/")
	r.POST("/mykratos/v1/m", _M_CreateM0_HTTP_Handler(srv))
	r.PUT("/mykratos/v1/m", _M_UpdateM0_HTTP_Handler(srv))
	r.DELETE("/mykratos/v1/m", _M_DeleteM0_HTTP_Handler(srv))
	r.GET("/mykratos/v1/m", _M_GetM0_HTTP_Handler(srv))
	r.POST("/mykratos/v1/m/list", _M_ListM0_HTTP_Handler(srv))
}

func _M_CreateM0_HTTP_Handler(srv MHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMCreateM)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateM(ctx, req.(*CreateMRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMReply)
		return ctx.Result(200, reply)
	}
}

func _M_UpdateM0_HTTP_Handler(srv MHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMUpdateM)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateM(ctx, req.(*UpdateMRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMReply)
		return ctx.Result(200, reply)
	}
}

func _M_DeleteM0_HTTP_Handler(srv MHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMDeleteM)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteM(ctx, req.(*DeleteMRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMReply)
		return ctx.Result(200, reply)
	}
}

func _M_GetM0_HTTP_Handler(srv MHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMGetM)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetM(ctx, req.(*GetMRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMReply)
		return ctx.Result(200, reply)
	}
}

func _M_ListM0_HTTP_Handler(srv MHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMListM)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListM(ctx, req.(*ListMRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMReply)
		return ctx.Result(200, reply)
	}
}

type MHTTPClient interface {
	CreateM(ctx context.Context, req *CreateMRequest, opts ...http.CallOption) (rsp *CreateMReply, err error)
	DeleteM(ctx context.Context, req *DeleteMRequest, opts ...http.CallOption) (rsp *DeleteMReply, err error)
	GetM(ctx context.Context, req *GetMRequest, opts ...http.CallOption) (rsp *GetMReply, err error)
	ListM(ctx context.Context, req *ListMRequest, opts ...http.CallOption) (rsp *ListMReply, err error)
	UpdateM(ctx context.Context, req *UpdateMRequest, opts ...http.CallOption) (rsp *UpdateMReply, err error)
}

type MHTTPClientImpl struct {
	cc *http.Client
}

func NewMHTTPClient(client *http.Client) MHTTPClient {
	return &MHTTPClientImpl{client}
}

func (c *MHTTPClientImpl) CreateM(ctx context.Context, in *CreateMRequest, opts ...http.CallOption) (*CreateMReply, error) {
	var out CreateMReply
	pattern := "/mykratos/v1/m"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMCreateM))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MHTTPClientImpl) DeleteM(ctx context.Context, in *DeleteMRequest, opts ...http.CallOption) (*DeleteMReply, error) {
	var out DeleteMReply
	pattern := "/mykratos/v1/m"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMDeleteM))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MHTTPClientImpl) GetM(ctx context.Context, in *GetMRequest, opts ...http.CallOption) (*GetMReply, error) {
	var out GetMReply
	pattern := "/mykratos/v1/m"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMGetM))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MHTTPClientImpl) ListM(ctx context.Context, in *ListMRequest, opts ...http.CallOption) (*ListMReply, error) {
	var out ListMReply
	pattern := "/mykratos/v1/m/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMListM))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MHTTPClientImpl) UpdateM(ctx context.Context, in *UpdateMRequest, opts ...http.CallOption) (*UpdateMReply, error) {
	var out UpdateMReply
	pattern := "/mykratos/v1/m"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMUpdateM))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
